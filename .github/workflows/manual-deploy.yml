name: Rollback Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      stage:
        required: true
        type: choice
        description: Stage
        options:
          - dev
          - test
          - prod
      regions:
        required: false
        type: choice
        description: Regions
        options:
          - us-east-1 us-east-2 us-west-2
          - us-east-1
          - us-east-2
          - us-west-2
      version:
        required: true
        type: string
        description: Version

jobs:
  validate_input:
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Validate input based on environment
      id: validate
      run: |
        if [[ "${{ github.event.inputs.stage }}" == "prod" ]]; then
          # Validate for prod
          if [[ "${{ github.event.inputs.version }}" == *".beta" ]]; then
            echo "Deployment to prod with beta tags is not allowed."
            exit 1
          fi
        fi

    - name: Determine if version is a commit hash (SHA)
      id: check_sha
      run: |
        if [[ "${{ github.event.inputs.version }}" =~ ^[0-9a-f]{7,40}$ ]]; then
          echo "version_type=hash" >> $GITHUB_OUTPUT
        else
          echo "version_type=tag_or_release" >> $GITHUB_OUTPUT
        fi

    - name: Validate commit hash exists (if version is a hash)
      if: steps.check_sha.outputs.version_type == 'hash'
      run: |
        if ! git cat-file -e ${{ github.event.inputs.version }}^{commit}; then
          echo "The provided commit hash does not exist."
          exit 1
        fi

    - name: Check if tag is associated with a pre-release on GitHub
      if: github.event.inputs.stage == 'prod' && steps.check_sha.outputs.version_type == 'tag_or_release'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const tag = context.payload.inputs.version;
          const { owner, repo } = context.repo;
          const release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
          if (release.data.prerelease) {
            console.error(`The provided tag ${tag} is associated with a pre-release on GitHub.`);
            process.exit(1);
          }

    - name: Check tag position among production releases
      if: github.event.inputs.stage == 'prod' && steps.check_sha.outputs.version_type == 'tag_or_release'
      run: |
        # Get all tags sorted by date (latest first) and filter out pre-release tags
        all_tags=($(git tag --sort=-creatordate | grep -v "\.beta" | grep -v "\.hotfix"))
        
        # Debug output
        echo "All tags:"
        echo "${all_tags[@]}"

        # Get the position of the provided tag
        tag_position=-1
        for i in "${!all_tags[@]}"; do
           if [[ "${all_tags[$i]}" == "${{ github.event.inputs.version }}" ]]; then
               tag_position=$i
               break
           fi
        done

        # Debug output
        echo "Position of the provided tag: $tag_position"

        max_position=${MAX_TAG_POSITION:-5}  # Default to 5 if the environment variable isn't set

        # Check the tag position
        if [[ $tag_position -ge $max_position || $tag_position -lt 0 ]]; then
           echo "Provided tag is more than $max_position tags before the latest or doesn't exist."
           exit 1
        fi

  deploy:
    needs: validate_input
    runs-on: ubuntu-latest

    steps:
    - name: Deploy
      run: |
        echo "Deploying version ${{ github.event.inputs.version }} to ${{ github.event.inputs.stage }} in regions ${{ github.event.inputs.regions }}..."
        # Deployment steps...